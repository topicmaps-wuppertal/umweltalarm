{"version":3,"sources":["UmweltalarmMap.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["host","getData","setGazData","setInfoData","a","prefix","sources","md5FetchText","adressen","bezirke","quartiere","pois","kitas","gazData","getGazDataForTopicIds","md5FetchJSON","ns","ls","UmweltalarmMap","windowSize","useContext","ResponsiveTopicMapContext","useState","useEffect","style","position","top","height","width","backgroundColor","zIndex","pointerEvents","left","borderRadius","TopicMapComponent","App","TopicMapContextProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kWAkBMA,EAAO,wCAEPC,EAAO,uCAAG,WAAOC,EAAYC,GAAnB,uBAAAC,EAAA,6DACRC,EAAS,oBACTC,EAAU,GAFF,SAGWC,YAAaF,EAAQL,EAAO,uBAHvC,cAGdM,EAAQE,SAHM,gBAIUD,YAAaF,EAAQL,EAAO,sBAJtC,cAIdM,EAAQG,QAJM,iBAKYF,YAAaF,EAAQL,EAAO,wBALxC,eAKdM,EAAQI,UALM,iBAMOH,YAAaF,EAAQL,EAAO,mBANnC,eAMdM,EAAQK,KANM,iBAOQJ,YAAaF,EAAQL,EAAO,oBAPpC,eAOdM,EAAQM,MAPM,OASRC,EAAUC,YAAsBR,EAAS,CAC7C,OACA,QACA,UACA,YACA,aAGFJ,EAAWW,GAjBG,UAmBGE,YAAaV,EAAQL,EAAO,iCAnB/B,eAmBRgB,EAnBQ,iBAoBGD,YAAaV,EAAQL,EAAO,uCApB/B,QAoBRiB,EApBQ,OAqBdd,EAAY,CAACa,EAAIC,IArBH,4CAAH,wDA0EEC,MAlDf,WAA2B,IACjBC,EAAeC,qBAAWC,KAA1BF,WADgB,EAGMG,mBAAS,IAHf,mBAGjBT,EAHiB,KAGRX,EAHQ,OAIQoB,mBAAS,IAJjB,mBAIPnB,GAJO,WAQxB,OAHAoB,qBAAU,WACRtB,EAAQC,EAAYC,KACnB,IAED,gCACE,qBACEqB,MAAO,CACLC,SAAU,WACVC,KAAe,OAAVP,QAAU,IAAVA,OAAA,EAAAA,EAAYQ,QAAS,EAAI,EAC9BC,OAAiB,OAAVT,QAAU,IAAVA,OAAA,EAAAA,EAAYS,QAAS,OAC5BD,OAAQ,MACRE,gBAAiB,YACjBC,OAAQ,SACRC,cAAe,UAGnB,qBACEP,MAAO,CACLC,SAAU,WACVO,MAAgB,OAAVb,QAAU,IAAVA,OAAA,EAAAA,EAAYS,OAAQ,EAAI,EAC9BD,QAAkB,OAAVR,QAAU,IAAVA,OAAA,EAAAA,EAAYQ,SAAU,OAC9BC,MAAO,MACPC,gBAAiB,YACjBC,OAAQ,SACRC,cAAe,UAGnB,qBACEP,MAAO,CACLS,aAAc,MACdR,SAAU,WACVO,MAAgB,OAAVb,QAAU,IAAVA,OAAA,EAAAA,EAAYS,OAAQ,EAAI,GAC9BF,KAAe,OAAVP,QAAU,IAAVA,OAAA,EAAAA,EAAYQ,QAAS,EAAI,GAC9BA,OAAQ,OACRC,MAAO,OACPC,gBAAiB,YACjBC,OAAQ,SACRC,cAAe,UAGnB,cAACG,EAAA,EAAD,CAAmBrB,QAASA,QCzEnBsB,MARf,WACE,OACE,cAACC,EAAA,EAAD,UACE,cAAC,EAAD,OCCSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKMQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCVnCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAACmB,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YC/G5B3B,M","file":"static/js/main.8cd94a86.chunk.js","sourcesContent":["import { useEffect, useContext } from \"react\";\n\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"react-cismap/topicMaps.css\";\nimport { md5FetchText, fetchJSON, md5FetchJSON } from \"react-cismap/tools/fetching\";\nimport { getGazDataForTopicIds } from \"react-cismap/tools/gazetteerHelper\";\n\nimport { ResponsiveTopicMapContext } from \"react-cismap/contexts/ResponsiveTopicMapContextProvider\";\nimport { getClusterIconCreatorFunction } from \"react-cismap/tools/uiHelper\";\nimport TopicMapComponent from \"react-cismap/topicmaps/TopicMapComponent\";\nimport FeatureCollection from \"react-cismap/FeatureCollection\";\nimport GenericInfoBoxFromFeature from \"react-cismap/topicmaps/GenericInfoBoxFromFeature\";\nimport getGTMFeatureStyler from \"react-cismap/topicmaps/generic/GTMStyler\";\n\nconst host = \"https://wupp-topicmaps-data.cismet.de\";\n\nconst getData = async (setGazData, setInfoData) => {\n  const prefix = \"GazDataForStories\";\n  const sources = {};\n  sources.adressen = await md5FetchText(prefix, host + \"/data/adressen.json\");\n  sources.bezirke = await md5FetchText(prefix, host + \"/data/bezirke.json\");\n  sources.quartiere = await md5FetchText(prefix, host + \"/data/quartiere.json\");\n  sources.pois = await md5FetchText(prefix, host + \"/data/pois.json\");\n  sources.kitas = await md5FetchText(prefix, host + \"/data/kitas.json\");\n\n  const gazData = getGazDataForTopicIds(sources, [\n    \"pois\",\n    \"kitas\",\n    \"bezirke\",\n    \"quartiere\",\n    \"adressen\",\n  ]);\n\n  setGazData(gazData);\n\n  const ns = await md5FetchJSON(prefix, host + \"/data/naturschutzgebiete.json\");\n  const ls = await md5FetchJSON(prefix, host + \"/data/landschaftsschutzgebiete.json\");\n  setInfoData([ns, ls]);\n};\n\nfunction UmweltalarmMap() {\n  const { windowSize } = useContext(ResponsiveTopicMapContext);\n\n  const [gazData, setGazData] = useState([]);\n  const [infoData, setInfoData] = useState([]);\n  useEffect(() => {\n    getData(setGazData, setInfoData);\n  }, []);\n  return (\n    <div>\n      <div\n        style={{\n          position: \"absolute\",\n          top: windowSize?.height / 2 - 1,\n          width: windowSize?.width || \"100%\",\n          height: \"2px\",\n          backgroundColor: \"#00000023\",\n          zIndex: \"100000\",\n          pointerEvents: \"none\",\n        }}\n      ></div>\n      <div\n        style={{\n          position: \"absolute\",\n          left: windowSize?.width / 2 - 1,\n          height: windowSize?.height || \"100%\",\n          width: \"2px\",\n          backgroundColor: \"#00000023\",\n          zIndex: \"100000\",\n          pointerEvents: \"none\",\n        }}\n      ></div>\n      <div\n        style={{\n          borderRadius: \"50%\",\n          position: \"absolute\",\n          left: windowSize?.width / 2 - 10,\n          top: windowSize?.height / 2 - 10,\n          height: \"20px\",\n          width: \"20px\",\n          backgroundColor: \"#00000023\",\n          zIndex: \"100000\",\n          pointerEvents: \"none\",\n        }}\n      ></div>\n      <TopicMapComponent gazData={gazData}></TopicMapComponent>\n    </div>\n  );\n}\n\nexport default UmweltalarmMap;\n","import \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"react-cismap/topicMaps.css\";\nimport TopicMapContextProvider from \"react-cismap/contexts/TopicMapContextProvider\";\nimport UmweltalarmMap from \"./UmweltalarmMap\";\n\nfunction App() {\n  return (\n    <TopicMapContextProvider>\n      <UmweltalarmMap />\n    </TopicMapContextProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}