{"version":3,"sources":["version.js","components/MenuFooter.js","components/Menu.js","Crosshair.js","UmweltalarmMap.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["APPERSION","Footer","setAppMenuActiveMenuSection","useContext","UIDispatchContext","style","fontSize","className","onClick","scroller","scrollTo","containerId","document","title","href","target","reactCismapVersion","rel","MyMenu","ModalApplicationMenu","menuIcon","menuTitle","menuIntroduction","menuSections","DefaultSettingsPanel","skipFilterTitleSettings","skipClusteringSettings","skipSymbolsizeSetting","Section","sectionKey","sectionTitle","sectionBsStyle","sectionContent","ConfigurableDocBlocks","configs","getSimpleHelpForTM","undefined","menuFooter","MenuFooter","Comp","windowSize","ResponsiveTopicMapContext","position","top","height","width","backgroundColor","zIndex","pointerEvents","left","borderRadius","host","getData","setGazData","setInfoData","a","prefix","sources","md5FetchText","adressen","bezirke","quartiere","pois","kitas","gazData","getGazDataForTopicIds","md5FetchJSON","ns","ls","crs","type","properties","name","UmweltalarmMap","useState","infoData","hits","setHits","useEffect","Crosshair","TopicMapComponent","modalMenu","homeZoom","maxZoom","mappingBoundsChanged","boundingBox","bbox","bottom","right","bbPoly","bboxPolygon","center","turfCenter","infodataSet","feature","booleanIntersects","push","console","log","SG_TYP","ResponsiveInfoBox","header","textAlign","verticalAlign","background","color","opacity","paddingLeft","paddingTop","paddingBottom","pixelwidth","isCollapsible","alwaysVisibleDiv","length","collapsibleDiv","map","entry","index","fixedRow","App","backgroundModes","getInternetExplorerVersion","mode","layerKey","baseLayerConf","defaultLayerConf","namedLayers","cismetLight","style_","xpane","cismetText","iconOpacity","textOpacity","TopicMapContextProvider","backgroundConfigurations","lbk","layerkeyx","layerkey","src","stadtplan","vector","referenceSystem","MappingConstants","crs3857","mapEPSGCode","referenceSystemDefinition","proj4crs3857def","maskingPolygon","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.94e11046.chunk.js","sourcesContent":["const APPERSION = \"0.2.0\";\nconst APPHASH = \"#cbeffe9d76d0d1fd9a507acce01543160d8dcaea\";\n\nexport const getApplicationVersion = () => {\n  /*eslint-disable no-useless-concat*/\n  if (APPERSION === \"%APPLICATION\" + \"_\" + \"VERSION%\") {\n    return \"dev-hot-reload\";\n  } else {\n    return APPERSION;\n  }\n};\nexport const getApplicationHash = () => {\n  if (APPHASH === \"%APPLICATION\" + \"_\" + \"HASH%\") {\n    return \"#dev-hot-reload\";\n  } else {\n    return APPHASH;\n  }\n};\n","import { useContext } from \"react\";\nimport { UIDispatchContext } from \"react-cismap/contexts/UIContextProvider\";\nimport { version as reactCismapVersion } from \"react-cismap/meta\";\nimport { scroller } from \"react-scroll\";\nimport { getApplicationVersion } from \"../version\";\n\nconst Footer = () => {\n  const { setAppMenuActiveMenuSection } = useContext(UIDispatchContext);\n\n  return (\n    <div style={{ fontSize: \"11px\" }}>\n      <b>Hintergrundkarten</b>: Stadtkarte 2.0 © RVR | True Orthophoto 2020 © Stadt Wuppertal |\n      Openmaptiles basierte Vectorkarte (hosted by cismet){\" \"}\n      <a\n        className='pleaseRenderAsLink'\n        onClick={() => {\n          setAppMenuActiveMenuSection(\"help\");\n          scroller.scrollTo(\"Datengrundlage\", { containerId: \"myMenu\" });\n        }}\n      >\n        (Details und Nutzungsbedingungen)\n      </a>\n      <br />\n      <div>\n        <b>\n          {document.title} v{getApplicationVersion()}\n        </b>\n        :{\" \"}\n        <a href='https://cismet.de/' target='_cismet'>\n          cismet GmbH\n        </a>{\" \"}\n        auf Basis von{\" \"}\n        <a href='http://leafletjs.com/' target='_more'>\n          Leaflet\n        </a>{\" \"}\n        und{\" \"}\n        <a href='https://cismet.de/#refs' target='_cismet'>\n          cids | react-cismap v{reactCismapVersion}\n        </a>{\" \"}\n        |{\" \"}\n        <a\n          target='_blank'\n          rel='noopener noreferrer'\n          href='https://cismet.de/datenschutzerklaerung.html'\n        >\n          Datenschutzerklärung (Privacy Policy)\n        </a>\n      </div>\n    </div>\n  );\n};\nexport default Footer;\n","import { useContext } from \"react\";\nimport { UIDispatchContext } from \"react-cismap/contexts/UIContextProvider\";\nimport { getSimpleHelpForTM } from \"react-cismap/tools/uiHelper\";\nimport ConfigurableDocBlocks from \"react-cismap/topicmaps/ConfigurableDocBlocks\";\nimport DefaultSettingsPanel from \"react-cismap/topicmaps/menu/DefaultSettingsPanel\";\nimport ModalApplicationMenu from \"react-cismap/topicmaps/menu/ModalApplicationMenu\";\nimport Section from \"react-cismap/topicmaps/menu/Section\";\nimport MenuFooter from \"./MenuFooter\";\n\nconst MyMenu = () => {\n  const { setAppMenuActiveMenuSection } = useContext(UIDispatchContext);\n  const simpleHelp = undefined;\n  return (\n    <ModalApplicationMenu\n      menuIcon={\"bars\"}\n      menuTitle={\"Einstellungen und Kompaktanleitung\"}\n      menuIntroduction={\n        <span>\n          Über <strong>Einstellungen</strong> können Sie die Darstellung der Hintergrundkarte und\n          der Objekte an Ihre Vorlieben anpassen. Wählen Sie <strong>Kompaktanleitung</strong> für\n          detailliertere Bedienungsinformationen.enungsinformationen.\n        </span>\n      }\n      menuSections={[\n        <DefaultSettingsPanel\n          key='settings'\n          skipFilterTitleSettings={true}\n          skipClusteringSettings={true}\n          skipSymbolsizeSetting={true}\n        />,\n\n        <Section\n          key='help'\n          sectionKey='help'\n          sectionTitle='Kompaktanleitung'\n          sectionBsStyle='default'\n          sectionContent={\n            <ConfigurableDocBlocks configs={getSimpleHelpForTM(document.title, simpleHelp)} />\n          }\n        />,\n      ]}\n      menuFooter={<MenuFooter />}\n    />\n  );\n};\nexport default MyMenu;\n","import { useContext } from \"react\";\n\nimport { ResponsiveTopicMapContext } from \"react-cismap/contexts/ResponsiveTopicMapContextProvider\";\n\nconst Comp = () => {\n  const { windowSize } = useContext(ResponsiveTopicMapContext);\n\n  return (\n    <div>\n      <div\n        style={{\n          position: \"absolute\",\n          top: (windowSize?.height || 500) / 2 - 1,\n          width: windowSize?.width || \"100%\",\n          height: \"2px\",\n          backgroundColor: \"#00000023\",\n          zIndex: \"100000\",\n          pointerEvents: \"none\",\n        }}\n      ></div>\n      <div\n        style={{\n          position: \"absolute\",\n          left: (windowSize?.width || 500) / 2 - 1,\n          height: windowSize?.height || \"100%\",\n          width: \"2px\",\n          backgroundColor: \"#00000023\",\n          zIndex: \"100000\",\n          pointerEvents: \"none\",\n        }}\n      ></div>\n      <div\n        style={{\n          borderRadius: \"50%\",\n          position: \"absolute\",\n          left: (windowSize?.width || 500) / 2 - 10,\n          top: (windowSize?.height || 500) / 2 - 10,\n          height: \"20px\",\n          width: \"20px\",\n          backgroundColor: \"#00000023\",\n          zIndex: \"100000\",\n          pointerEvents: \"none\",\n        }}\n      ></div>\n    </div>\n  );\n};\n\nexport default Comp;\n","import bboxPolygon from \"@turf/bbox-polygon\";\nimport booleanIntersects from \"@turf/boolean-intersects\";\nimport turfCenter from \"@turf/center\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport { useEffect, useState } from \"react\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport { md5FetchJSON, md5FetchText } from \"react-cismap/tools/fetching\";\nimport { getGazDataForTopicIds } from \"react-cismap/tools/gazetteerHelper\";\nimport \"react-cismap/topicMaps.css\";\nimport ResponsiveInfoBox from \"react-cismap/topicmaps/ResponsiveInfoBox\";\nimport TopicMapComponent from \"react-cismap/topicmaps/TopicMapComponent\";\nimport \"./App.css\";\nimport MyMenu from \"./components/Menu\";\nimport Crosshair from \"./Crosshair\";\n\nconst host = \"https://wupp-topicmaps-data.cismet.de\";\n\nconst getData = async (setGazData, setInfoData) => {\n  const prefix = \"GazDataForStories\";\n  const sources = {};\n  sources.adressen = await md5FetchText(prefix, host + \"/data/3857/adressen.json\");\n  sources.bezirke = await md5FetchText(prefix, host + \"/data/3857/bezirke.json\");\n  sources.quartiere = await md5FetchText(prefix, host + \"/data/3857/quartiere.json\");\n  sources.pois = await md5FetchText(prefix, host + \"/data/3857/pois.json\");\n  sources.kitas = await md5FetchText(prefix, host + \"/data/3857/kitas.json\");\n\n  const gazData = getGazDataForTopicIds(sources, [\n    \"pois\",\n    \"kitas\",\n    \"bezirke\",\n    \"quartiere\",\n    \"adressen\",\n  ]);\n\n  setGazData(gazData);\n\n  const ns = await md5FetchJSON(prefix, host + \"/data/3857/naturschutzgebiete.json\");\n  const ls = await md5FetchJSON(prefix, host + \"/data/3857/landschaftsschutzgebiete.json\");\n  for (const f of ns) {\n    f.crs = {\n      type: \"name\",\n      properties: {\n        name: \"urn:ogc:def:crs:EPSG::25832\",\n      },\n    };\n  }\n  for (const f of ls) {\n    f.crs = {\n      type: \"name\",\n      properties: {\n        name: \"urn:ogc:def:crs:EPSG::25832\",\n      },\n    };\n  }\n  setInfoData([ns, ls]);\n};\n\nfunction UmweltalarmMap() {\n  const [gazData, setGazData] = useState([]);\n  const [infoData, setInfoData] = useState([]);\n  const [hits, setHits] = useState([]);\n  useEffect(() => {\n    getData(setGazData, setInfoData);\n  }, []);\n  return (\n    <div>\n      <Crosshair />\n      <TopicMapComponent\n        gazData={gazData}\n        modalMenu={<MyMenu />}\n        homeZoom={13}\n        maxZoom={22}\n        mappingBoundsChanged={(boundingBox) => {\n          setHits([]);\n          let bbox = [boundingBox.left, boundingBox.bottom, boundingBox.right, boundingBox.top];\n          let bbPoly = bboxPolygon(bbox);\n          let center = turfCenter(bbPoly);\n          //   console.log(\"xxx mappingBoundsChanged\", center);\n          const hits = [];\n          for (const infodataSet of infoData) {\n            // console.log(\"infodataSet\", infodataSet);\n            // console.log(\"infodataSetLength\", infodataSet.length);\n\n            for (const feature of infodataSet) {\n              if (booleanIntersects(feature, center)) {\n                hits.push(feature);\n                console.log(\"xxx hit\", feature.properties.SG_TYP);\n              }\n            }\n          }\n          setHits(hits);\n        }}\n      >\n        <ResponsiveInfoBox\n          //   panelClick={panelClick}\n          header={\n            <table style={{ width: \"100%\" }}>\n              <tbody>\n                <tr>\n                  <td\n                    style={{\n                      textAlign: \"left\",\n                      verticalAlign: \"top\",\n                      background: \"grey\",\n                      color: \"black\",\n                      opacity: \"0.9\",\n                      paddingLeft: \"3px\",\n                      paddingTop: \"0px\",\n                      paddingBottom: \"0px\",\n                    }}\n                  >\n                    <span>Umweltalarm</span>\n                  </td>\n                </tr>\n              </tbody>{\" \"}\n            </table>\n          }\n          pixelwidth={300}\n          //   collapsedInfoBox={collapsedInfoBox}\n          //   setCollapsedInfoBox={setCollapsedInfoBox}\n          isCollapsible={false}\n          //   handleResponsiveDesign={handleResponsiveDesign}\n          //   infoStyle={infoStyle}\n          //   secondaryInfoBoxElements={secondaryInfoBoxElements}\n          alwaysVisibleDiv={<span>Analyseergebnis ({hits.length})</span>}\n          collapsibleDiv={\n            <div>\n              {hits.length === 0 && <span>keine Besonderheiten</span>}\n              {hits.length > 0 && (\n                <div>\n                  es wurden folgende Treffer gefunden:\n                  {hits.map((entry, index) => {\n                    return <div key={index}>{entry.properties.SG_TYP}</div>;\n                  })}\n                </div>\n              )}\n            </div>\n          }\n          fixedRow={true}\n        />\n      </TopicMapComponent>\n    </div>\n  );\n}\n\nexport default UmweltalarmMap;\n","import \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"react-cismap/topicMaps.css\";\nimport TopicMapContextProvider from \"react-cismap/contexts/TopicMapContextProvider\";\nimport UmweltalarmMap from \"./UmweltalarmMap\";\nimport { MappingConstants } from \"react-cismap\";\nimport { getInternetExplorerVersion } from \"react-cismap/tools/browserHelper\";\nimport { defaultLayerConf } from \"react-cismap/tools/layerFactory\";\nimport { useEffect } from \"react\";\n\nfunction App() {\n  let backgroundModes;\n  useEffect(() => {\n    document.title = \"Umweltalarm Wuppertal\";\n  }, []);\n  if (getInternetExplorerVersion() === -1) {\n    backgroundModes = [\n      {\n        title: \"Stadtplan\",\n        mode: \"default\",\n        layerKey: \"stadtplan\",\n      },\n      {\n        title: \"Stadtplan (Vektordaten light)\",\n        mode: \"default\",\n        layerKey: \"vector\",\n      },\n\n      { title: \"Luftbildkarte\", mode: \"default\", layerKey: \"lbk\" },\n    ];\n  } else {\n    backgroundModes = [\n      {\n        title: \"Stadtplan\",\n        mode: \"default\",\n        layerKey: \"stadtplan\",\n      },\n\n      { title: \"Luftbildkarte\", mode: \"default\", layerKey: \"lbk\" },\n    ];\n  }\n  const backgroundConfigurations = {\n    lbk: {\n      layerkeyx: \"cismetText|trueOrtho2020@60\",\n      layerkey: \"wupp-plan-live@100|trueOrtho2020@75|rvrSchrift@100\",\n      src: \"/images/rain-hazard-map-bg/ortho.png\",\n      title: \"Luftbildkarte\",\n    },\n    stadtplan: {\n      layerkey: \"wupp-plan-live@45\",\n      src: \"/images/rain-hazard-map-bg/citymap.png\",\n      title: \"Stadtplan\",\n    },\n    vector: {\n      layerkey: \"cismetLight\",\n      src: \"/images/rain-hazard-map-bg/citymap.png\",\n      title: \"Stadtplan\",\n    },\n  };\n\n  // const baseLayerConf = JSON.parse(JSON.stringify(defaultLayerConf));\n  // TODO problems in settings preview map wehen doing the immutable way\n  const baseLayerConf = { ...defaultLayerConf };\n\n  baseLayerConf.namedLayers.cismetLight = {\n    type: \"vector\",\n    style_: \"http://0.0.0.0:888/styles/cismetplus/style.json\",\n    style: \"https://omt.map-hosting.de/styles/cismetplus/style.json\",\n    xpane: \"backgroundvectorLayers\",\n  };\n  baseLayerConf.namedLayers.cismetText = {\n    type: \"vector\",\n    style: \"http://omt.map-hosting.de/styles/klokantech-basic/style.json\",\n\n    opacity: 0.05,\n    iconOpacity: 0.7,\n    textOpacity: 0.7,\n    xpane: \"backgroundlayerTooltips\",\n  };\n\n  return (\n    <TopicMapContextProvider\n      baseLayerConf={baseLayerConf}\n      backgroundConfigurations={backgroundConfigurations}\n      backgroundModes={backgroundModes}\n      referenceSystem={MappingConstants.crs3857}\n      mapEPSGCode='3857'\n      referenceSystemDefinition={MappingConstants.proj4crs3857def}\n      maskingPolygon='POLYGON((668010.063156992 6750719.23021889,928912.612468322 6757273.20343972,930494.610325512 6577553.43685138,675236.835570551 6571367.64964125,668010.063156992 6750719.23021889))'\n    >\n      <UmweltalarmMap />\n    </TopicMapContextProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}